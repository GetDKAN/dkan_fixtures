<?php

/**
 * @file
 * DKAN Fixtures file.
 */

/**
 * Implements hook_migrate_api().
 */
function dkan_fixtures_migrate_api() {
  $api = array(
    // Migrate API, not CKAN's of course.
    'api' => 2,
    'groups' => array(
      'dkan_fixtures' => array(
        'title' => t('DKAN Fixtures'),
      ),
    ),
    'migrations' => array(
      'ckan_dataset_fixtures' => array(
        'class_name' => 'MigrateCkanDatasetImport',
        'group_name' => 'dkan_fixtures',
        'title' => t('DKAN Dataset Fixtures'),
      ),
    ),
  );
  return $api;
}

class MigrateCkanDatasetImport extends MigrateCkanDatasetBase {
  /**
   * Here we go.
   */
  public function __construct($arguments) {
    $arguments['endpoint'] = drupal_get_path('module', 'dkan_fixtures') . '/data/';
    $arguments['list_url'] = 'package_list.json';
    $arguments['item_url'] = 'package_show?id=:id.json';
    parent::__construct($arguments);

    $fields = $this->additionalFields();
    foreach ($fields as $id => $field) {
      $this->addFieldMapping($field, $field);
    }
  }

  /**
   * Gets additional fields.
   */
  public function additionalFields() {
    $api = open_data_schema_map_api_load('ckan_package_show');
    $fields = open_data_schema_map_additional_fields($api);
    $additional_fields = array();
    foreach ($fields as $id => $field) {
      if ($field != 'field_resources' &&
          $field != 'field_contact_email' &&
          $field != 'field_spatial' &&
          $field != 'field_tags' &&
          $field != 'field_additional_info') {
        $additional_fields[] = $field;
      }
    }
    return $additional_fields;
  }

  /**
   * Implements prepareRow.
   */
  public function prepareRow($row) {
    $fields = $this->additionalFields();
    // Uses 'value' if available.
    foreach ($fields as $id => $field) {
      if (is_array($row->dkan_additional_fields->{$field}) && $row->dkan_additional_fields->{$field}) {
        if (is_object($row->dkan_additional_fields->{$field}[0])) {
          if (isset($row->dkan_additional_fields->{$field}[0]->value)) {
            $row->{$field} = $row->dkan_additional_fields->{$field}[0]->value;
          }
        }
        else {
          $row->{$field} = $row->dkan_additional_fields->{$field}[0];
        }
      }
      elseif (is_object($row->dkan_additional_fields->{$field})) {
        if (isset($row->dkan_additional_fields->{$field}->value)) {
          $row->{$field} = $row->dkan_additional_fields->{$field}->value;
        }
      }
      else {
        $row->{$field} = $row->dkan_additional_fields->{$field};
      }
    }
  }
}

/**
 * Render fixtures for datasets.
 */
function dkan_fixtures_render_fixtures() {
  $rendered_fixtures = array();

  // Render list of packages first.
  $package_list_api = open_data_schema_map_api_load('ckan_package_list');
  $package_list_fetch = open_data_schema_map_render_api($package_list_api);
  $package_list = $package_list_fetch['result'];
  $rendered_fixtures[] = array(
    'filename' => 'package_list.json',
    'content' => drupal_json_encode($package_list),
  );

  // Use ids in package_list to create exports for every dataset.
  $package_show_api = open_data_schema_map_api_load('ckan_package_show');
  foreach ($package_list['result'] as $id) {
    $query = array('id' => $id, 'q' => 'api/3/action/package_show');
    $queries = array('id' => $id);
    $package_show = open_data_schema_map_render_api($package_show_api, $query, $queries);
    $rendered_fixtures[] = array(
      'filename' => 'package_show?id=' . $id . '.json',
      'content' => drupal_json_encode($package_show['result']),
    );
  }

  return $rendered_fixtures;
}

/**
 * Saves json fixture file into data directory.
 */
function dkan_fixtures_save_fixture($fixture, $module_path) {
  $file = fopen($module_path . '/data/' . $fixture['filename'], 'w');
  fwrite($file, $fixture['content']);
  fclose($file);
}

/**
 * Deregisters DKAN fixture migrations.
 */
function dkan_fixtures_migrations_disable() {
  Migration::deregisterMigration('ckan_dataset_fixtures');
}

/**
 * Drush save_fixtures command callback.
 */
function drush_dkan_fixtures_dkan_save_data() {
  // Allows other modules to recive exports.
  $modules = module_implements('dkan_fixtures_register');
  $modules = $modules ? $modules : array('dkan_fixtures');
  dpm($modules);
  foreach ($modules as $module) {
    $module_path = drupal_get_path('module', $module);
    // Remove old files.
    $files = glob($module_path . '/data/*');
    foreach ($files as $file) {
      if (is_file($file)) {
        unlink($file);
      }
    }
    // Create new fixtures.
    $fixtures = dkan_fixtures_render_fixtures();
    // Save them.
    foreach ($fixtures as $fixture) {
      dkan_fixtures_save_fixture($fixture, $module_path);
    }
  }
}

/**
 * Implements hook_restws_format_info().
 *
 * Provides basic formats.
 */
function dkan_fixtures_restws_format_info() {
  $result = array(
    'array' => array(
      'label' => t('Array'),
      'class' => 'RestWSFormatArray',
    ),
  );
  return $result;
}

/**
 * Adds array format.
 */
class RestWSFormatArray extends RestWSBaseFormat {
  /**
   * Returns array instead of serialized value.
   */
  public function serialize($values) {
    foreach ($values as $field => $value) {
      // Adds value to entity fields.
      if (isset($value['resource']) && isset($value['uuid'])) {
        $resource = entity_uuid_load($value['resource'], array($value['uuid']));
        $value['value'] = $resource[$value['id']]->name;
        $values[$field] = $value;
      }
      elseif (isset($value[0]) && is_array($value[0])) {
        foreach ($value as $num => $item) {
          if (isset($item['resource']) && isset($item['uuid'])) {
            $resource = entity_uuid_load($item['resource'], array($item['uuid']));
            $item['value'] = $resource[$item['id']]->name;
            $values[$field][$num] = $item;
          }
        }
      }
    }
    return $values;
  }
}

/**
 * Adds additional fields to package_show.
 */
function dkan_fixtures_open_data_schema_map_results_alter(&$result, $machine_name, $schema, $ids) {
  $api = open_data_schema_map_api_load($machine_name);
  if ($machine_name == 'ckan_package_show') {
    $format = restws_format('array');
    $resource = restws_resource_controller('node');
    $restws_result = $format->viewResource($resource, $ids[0], NULL);
    $fields = open_data_schema_map_additional_fields($api);
    foreach ($fields as $id => $field) {
      $result[0]['dkan_additional_fields'][$field] = $restws_result[$field];
    }
  }
}
